(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("4780d7ce6e5491e2c1190082f7fe0f812707fc77455616ab6f8b38e796cbffa9" "af1ad7ddaafd6a4018186f85e89bb5d79612773c1c3e08f48d903072eedb6f6e" default)))
 '(package-archives
   (quote
    (("melpa" . "http://elpa.emacs-china.org/melpa/")
     ("gnu" . "https://elpa.emacs-china.org/gnu/"))))
 '(package-selected-packages
   (quote
    (posframe htmlize hydra focus writeroom-mode calfw-cal calfw ir-black-theme neotree w3m deft super-save pangu-spacing pyim use-package diminish))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cfw:face-toolbar ((t :foreground "grey90" :background "black"))))
(package-initialize)
;;--------------------------------------

(fset 'yes-or-no-p 'y-or-n-p);;简化确认时的输入
(blink-cursor-mode 0)
(tool-bar-mode 0);;不显示工具栏
(menu-bar-mode 0);;不显示菜单栏
(scroll-bar-mode -1);;不显示滚动条
(set-scroll-bar-mode nil)
;;(global-linum-mode t) ;侧边显示行号
(column-number-mode t) ;状态栏显示行列信息
(show-paren-mode t) ;括号匹配高亮
(global-hl-line-mode 1) ;当前行高亮
(electric-pair-mode t);自动补全括号
(setq inhibit-startup-message t);;关闭启动画面
(global-font-lock-mode t);;高亮
(setq kill-ring-max 200);;设定删除保存记录为200
(setq-default kill-whole-line t);; 在行首 C-k 时，同时删除该行。
(setq diary-file "~/orgmode-blog/src/diary")
;;主题设置
(load-theme 'ir-black t)
;;断句相关
(setq sentence-end "\\([。！：；？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
;;滚动页面
(setq scroll-step 1
          scroll-margin 3
          scroll-conservatively 10000)
;; 自动的在文件末增加一新行
(setq require-final-newline t)
;;延迟加载所有的packages
;;(setq use-package-always-defer t)
;;--------------------------------------

;;编码问题
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(set-buffer-file-coding-system 'utf-8-unix)
(set-clipboard-coding-system 'utf-8-unix)
(set-file-name-coding-system 'utf-8-unix)
(set-keyboard-coding-system 'utf-8-unix)
(set-next-selection-coding-system 'utf-8-unix)
(set-selection-coding-system 'utf-8-unix)
(set-terminal-coding-system 'utf-8-unix)
(setq locale-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
;;--------------------------------------

;;buffer 设置
'(clean-buffer-list-kill-never-buffer-names
  (quote
       ("*scratch*" "*Messages*" "*server*" "*Group*" "*Org Agenda*" "TODO.\
txt" "&bitlbee")))
'(clean-buffer-list-kill-never-regexps
  (quote
   ("^ \\*Minibuf-.*\\*$" "^\\*Summary" "^\\*Article" "^#")))
'(clean-buffer-list-kill-regexps (quote (".*")))
;;--------------------------------------

;;快捷键
(global-set-key [f2] 'undo) ;;F2撤销
(global-set-key [f3] 'kill-this-buffer) ;;F3关闭当前buffer
(global-set-key [f5] 'writeroom-mode) ;;F5 writeroom-mode
(global-set-key [f9] 'buffer-menu) ;;F9打开buffer清单
(global-set-key [f8] 'neotree-toggle) ;;F8打开neotree

;; 关于没有选中区域,则默认为选中整行的advice
;; 默认情况下M-w复制一个区域，但是如果没有区域被选中，则复制当前行
(defadvice kill-ring-save (before slickcopy activate compile)
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (message "已选中当前行!")
     (list (line-beginning-position)
           (line-beginning-position 2)))))
;;--------------------------------------

(use-package super-save
  :ensure t
  :config
  (setq super-save-idle-duration 2)
  (setq super-save-auto-save-when-idle t)
  (super-save-mode +1))
;;--------------------------------------

(use-package neotree
  :ensure t
  :config
  ;;neotree默认打开当前文件节点
  (setq neo-smart-open t))
;;--------------------------------------

(use-package deft
  :commands (deft)
  :config
  (setq deft-directory "~/orgmode-blog/src"
	deft-extensions '("md" "org")
	deft-recursive t
	deft-incremental-search nil))  ;;默认用正则表达式搜索
;;deft菜单辅助
(eval-after-load "deft"
  '(progn
     (define-key deft-mode-map (kbd "<next>") 'hydra-deft/body)))
;;--------------------------------------

;;pyim拼音输入法设置
(use-package pyim
  :ensure t
  :config
  ;; 激活 basedict 拼音词库
  (use-package pyim-basedict
    :ensure t
    :config (pyim-basedict-enable))

  (setq default-input-method "pyim")

  ;; 我使用全拼
  (setq pyim-default-scheme 'quanpin)

  ;; 设置 pyim 探针设置，行首自动半角符号
  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))

  ;; 开启拼音搜索功能
  (pyim-isearch-mode 1)

  ;; 使用 pupup-el 来绘制选词框
  (setq pyim-page-tooltip 'posframe)

  ;; 选词框显示5个候选词
  (setq pyim-page-length 5)

  ;;候选詞翻页
  (define-key pyim-mode-map "." 'pyim-page-next-page)
  (define-key pyim-mode-map "," 'pyim-page-previous-page)

  ;; 让 Emacs 启动时自动加载 pyim 词库
  (add-hook 'emacs-startup-hook
            #'(lambda () (pyim-restart-1 t)))
  :bind
  (("M-j" . pyim-convert-code-at-point) ;与 pyim-probe-dynamic-english 配合
   ("C-;" . pyim-delete-word-from-personal-buffer)))

(setq default-input-method "pyim")

;;全局切换输入法快捷键
;;输出变量到文件
(defun print-to-file (filename data)
  (interactive)
  (with-temp-file filename
    (prin1 data (current-buffer))))

;;启动默认英文
(add-hook 'emacs-startup-hook
	  (print-to-file "/tmp/emacs_input_status" current-input-method)
	  (shell-command "tmux refresh-client -S"))

;;切换改变状态
(defun chinese-switch-status()
  (interactive)
  (toggle-input-method)
  (print-to-file "/tmp/emacs_input_status" current-input-method)
  (shell-command "tmux refresh-client -S"))

(global-set-key (kbd "C-\\") 'chinese-switch-status)

(setq pyim-punctuation-translate-p '(auto yes no))   ;中文使用全角标点，英文使用半角标点。
;;--------------------------------------

;;org-mode设置
(defun org-mode-my-init ()
  ;;辅助菜单
  (define-key org-mode-map (kbd "<next>") 'hydra-org/body)
  ;;自动换行
  (setq truncate-lines nil))
(add-hook 'org-mode-hook 'org-mode-my-init)
;;导出为html
(setq org-html-doctype "html5")
(setq org-html-xml-declaration nil)
(setq org-html-postamble nil)
;;全局缩进
(setq org-startup-indented t)
;;todo 状态设定
(setq org-todo-keywords
    '((sequence "REPORT(r)" "BUG(b)" "FIXED(f)")
      (sequence "TODO(T!)" "|" "DONE(D@)3" "CANCELED(C@/!)")
     ))
;;自动更新上级任务状态
(defun org-summary-todo (n-done n-not-done)
      "Switch entry to DONE when all subentries are done, to TODO otherwise."
      (let (org-log-done org-log-states)   ; turn off logging
        (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

    (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
;;agenda 的位置
(setq org-agenda-files (list "~/orgmode-blog/src/agenda/work.org"
                             "~/orgmode-blog/src/agenda/projects.org"
                             "~/orgmode-blog/src/agenda/home.org"
                             "~/orgmode-blog/src/agenda/todo/"))
;;--------------------------------------

;;w3m浏览器设置
(use-package w3m
  :ensure t
  :config
  (setq w3m-use-favicon nil)
  (setq w3m-use-cookies t)
  (setq w3m-home-page "http://tibiji.com/autumnc"))
;;--------------------------------------

;;中英文混排
(use-package pangu-spacing
  :config
  (global-pangu-spacing-mode 1))
;;--------------------------------------

;;calfw日记的日历框架
(use-package calfw
  :config
  (add-hook 'cfw:details-mode-hook (lambda () (setq truncate-lines nil))))
(use-package calfw-cal)
;;--------------------------------------

;;writeroom
;;(add-hook 'writeroom-mode-hook (lambda () (focus-mode)))
;;--------------------------------------

;;hydra设置
;;主功能菜单
(defhydra hydra-hick (:color pink
                             :hint nil)
  "
^Function^         ^Buffer^         ^Window^            ^Mode
^^^^^^^^-----------------------------------------------------------------
_d_: deft          _m_: menu        _1_: only this      _W_: writeroom
_w_: w3m           _k_: kill        _K_: kill b&w       _f_: focus 
_n_: neotree       _]_: next        _o_: other          _SPC_: mini vi
_j_: journal       _[_: prev        _0_: delete         _l_: linum-mode
"
  ("d" deft :exit t)
  ("w" w3m :exit t)
  ("n" neotree-toggle :exit t)
  ("j" cfw:open-diary-calendar :exit t)
  ("m" buffer-menu :exit t)
  ("k" kill-this-buffer)
  ("]" next-buffer)
  ("[" previous-buffer)
  ("1" delete-other-windows)
  ("0" delete-window :exit t)
  ("o" other-window :exit t)
  ("K" kill-buffer-and-window :exit t)
  ("W" writeroom-mode :exit t)
  ("f" focus-mode :exit t)
  ("SPC" hydra-vi/body :exit t)
  ("l" linum-mode :toggle t :exit t)
  ("u" undo "undo")
  ("<prior>" nil)
  ("c" nil "cancel")
  ("q" quit-window "quit" :color blue))

(global-set-key (kbd "<prior>") 'hydra-hick/body)

;;仿 vi模式
(defun hydra-vi/pre ()
  (set-cursor-color "#e52b50"))
(defun hydra-vi/post ()
  (set-cursor-color "#ffffff"))
(global-set-key
   (kbd "<f11>")
   (defhydra hydra-vi (:pre hydra-vi/pre
			    :post hydra-vi/post
			    :foreign-keys warn
			    :color amaranth
			    :hint nil)
     "vi"
   ("j" next-line)
   ("<down>" next-line)
   ("k" previous-line)
   ("<up>" previous-line)
   ("l" forward-char)
   ("<right>" forward-char)
   ("h" backward-char)
   ("<left>" backward-char)
   ("^" (progn (beginning-of-line) (indent-according-to-mode)))
   ("<home>" beginning-of-line)
   ("$" move-end-of-line)
   ("<end>" move-end-of-line)
   ("M-SPC" scroll-down "scroll up")
   ("SPC" scroll-up "scroll down")
   ("." forward-page)
   ("," backward-page)
   ("n" narrow-to-page :bind nil :exit t)
   ("gg" beginning-of-buffer)
   ("G" end-of-buffer)
   (":" (progn (call-interactively 'eval-expression)))
   ("r" recenter-top-bottom)
   ("!" shell-command "shell")
   ("[" org-backward-paragraph)
   ("]" org-forward-paragraph)
   ("dd" kill-whole-line)
   ("dw" kill-word)
   ("dp" duplicate-line-or-region :color green)
   ("u" undo)
   ("r" undo-tree-redo)
   ("w" forward-word)
   ("W" backward-word)
   ("x" delete-char)
   ("y" kill-ring-save)
   ("<next>" nil)
   ("RET" nil)
   ("<prior>" nil)   
   ("i" nil)
   ("<f11>" nil)
   ("a" nil)
   ("c" nil)))
(hydra-set-property 'hydra-vi :verbosity 1)

(defhydra hydra-org (:foreign-keys run :color red :hint nil)
  "
^Todo^              ^Link^            ^Function^            ^Other
^^^^^^^^----------------------------------------------------------------------
_td_: todo          _li_: insert link _a_: agenda           _g_: goto  
_b_: checkbox       _lo_: open link   _ta_: table           _ls_: link store
_SPC_: capture      _ln_: next link   _tg_: tags            _s_: search
_d_: deadline       _lp_: prev link   _ts_: time stamp      _lt_: link display
----------------------------------------------------------------------
_n_: ↓ _p_: ↑ _N_: |↓ _P_: |↑ _c_: ↕_C_: ⇕ _<_: → _>_: ← _^_: ⇑ _\-_: ⇓
  "
  ("n" outline-next-visible-heading)
  ("p" outline-previous-visible-heading)
  ("N" org-forward-heading-same-level)
  ("P" org-backward-heading-same-level)
  ("u" outline-up-heading)
  ("c" org-cycle)
  ("C" org-global-cycle)
  ("<" org-promote-subtree)
  (">" org-demote-subtree)
  ("^" org-move-subtree-up)
  ("-" org-move-subtree-down)
  ("SPC" org-capture)
  ("d" org-deadline)
  ("td" org-todo)
  ("b" org-toggle-checkbox)
  ("li" org-insert-link)
  ("lo" org-open-link-from-string)
  ("ln" org-next-link)
  ("lp" org-previous-link)
  ("ls" org-store-link)
  ("lt" org-toggle-link-display)
  ("a" org-agenda)
  ("ta" org-table-create)
  ("tg" org-tags-view)
  ("ts" org-time-stamp)
  ("g" org-goto :exit t)
  ("s" org-search-view)
  ("q" nil)
  ("<prior>" nil)
  ("<next>" nil)
  ("<f11>" nil ))

(defhydra hydra-deft
  (:foreign-keys run :color pink :columns 3 :hint nil)
  "Deft Hotkeys"
  ("n" deft-new-file "New file")
  ("N" deft-new-file-named "New file named")
  ("d" deft-delete-file "Delete")
  ("R" deft-rename-file "Rename")
  ("f" deft-find-file "Find file")
  ("o" deft-open-file-other-window "Open in other window")
  ("a" deft-archive-file "Archive file")
  ("r" deft-refresh "Refresh")
  ("q" quit-window "Quit")
  ("i" deft-toggle-incremental-search "Incremental search")
  ("s" deft-toggle-sort-method "Sort method")
  ("c" nil "Cancel")
  ("<next>" nil)
  ("<prior>" nil))

;; Hydra for org agenda (graciously taken from Spacemacs)
(defhydra hydra-org-agenda (:hint none)
  "
Org agenda (_q_uit)

^Clock^      ^Visit entry^              ^Date^             ^Other^
^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
_ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
_co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
_cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
_cj_ jump    _o_   link                 _+_  do later      ^^
^^           ^^                         _-_  do earlier    ^^
^^           ^^                         ^^                 ^^
^View^          ^Filter^                 ^Headline^         ^Toggle mode^
^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
_vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
_vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
_vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
_vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
_vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
_vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
_vp_ prev span  ^^                       ^^                 ^^
_vr_ reset      ^^                       ^^                 ^^
^^              ^^                       ^^                 ^^
"
  ;; Entry
  ("hA" org-agenda-archive-default)
  ("hk" org-agenda-kill)
  ("hp" org-agenda-priority)
  ("hr" org-agenda-refile)
  ("h:" org-agenda-set-tags)
  ("ht" org-agenda-todo)
  ;; Visit entry
  ("o"   link-hint-open-link :exit t)
  ("<tab>" org-agenda-goto :exit t)
  ("TAB" org-agenda-goto :exit t)
  ("SPC" org-agenda-show-and-scroll-up)
  ("RET" org-agenda-switch-to :exit t)
  ;; Date
  ("dt" org-agenda-date-prompt)
  ("dd" org-agenda-deadline)
  ("+" org-agenda-do-date-later)
  ("-" org-agenda-do-date-earlier)
  ("ds" org-agenda-schedule)
  ;; View
  ("vd" org-agenda-day-view)
  ("vw" org-agenda-week-view)
  ("vt" org-agenda-fortnight-view)
  ("vm" org-agenda-month-view)
  ("vy" org-agenda-year-view)
  ("vn" org-agenda-later)
  ("vp" org-agenda-earlier)
  ("vr" org-agenda-reset-view)
  ;; Toggle mode
  ("ta" org-agenda-archives-mode)
  ("tA" (org-agenda-archives-mode 'files))
  ("tr" org-agenda-clockreport-mode)
  ("tf" org-agenda-follow-mode)
  ("tl" org-agenda-log-mode)
  ("td" org-agenda-toggle-diary)
  ;; Filter
  ("fc" org-agenda-filter-by-category)
  ("fx" org-agenda-filter-by-regexp)
  ("ft" org-agenda-filter-by-tag)
  ("fr" org-agenda-filter-by-tag-refine)
  ("fh" org-agenda-filter-by-top-headline)
  ("fd" org-agenda-filter-remove-all)
  ;; Clock
  ("cq" org-agenda-clock-cancel)
  ("cj" org-agenda-clock-goto :exit t)
  ("ci" org-agenda-clock-in :exit t)
  ("co" org-agenda-clock-out)
  ;; Other
  ("q" nil :exit t)
  ("gd" org-agenda-goto-date)
  ("." org-agenda-goto-today)
  ("gr" org-agenda-redo))
